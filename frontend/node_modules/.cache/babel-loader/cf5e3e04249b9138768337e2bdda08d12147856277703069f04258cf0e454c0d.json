{"ast":null,"code":"var _jsxFileName = \"/Users/ruihanjc/Downloads/codetogive/CodeToGive/frontend/src/Voice.js\",\n  _s = $RefreshSig$();\nimport React from 'react';\nimport './Voice.css';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nfunction Voice() {\n  _s();\n  const [textToCopy, setTextToCopy] = useState();\n  const [isCopied, setCopied] = useClipboard(textToCopy, {\n    successDuration: 1000\n  });\n\n  //subscribe to thapa technical for more awesome videos\n\n  const startListening = () => SpeechRecognition.startListening({\n    continuous: true,\n    language: 'en-IN'\n  });\n  const {\n    transcript,\n    browserSupportsSpeechRecognition\n  } = useSpeechRecognition();\n  if (!browserSupportsSpeechRecognition) {\n    return null;\n  }\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"container\",\n      children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n        children: \"Speech to Text Converter\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 22,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 23,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n        children: \"A React hook that converts speech from the microphone to text and makes it available to your React components.\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 24,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"main-content\",\n        onClick: () => setTextToCopy(transcript),\n        children: transcript\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 27,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"btn-style\",\n        children: [/*#__PURE__*/_jsxDEV(\"button\", {\n          onClick: setCopied,\n          children: isCopied ? 'Copied!' : 'Copy to clipboard'\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 33,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n          onClick: startListening,\n          children: \"Start Listening\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 36,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n          onClick: SpeechRecognition.stopListening,\n          children: \"Stop Listening\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 37,\n          columnNumber: 21\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 31,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 21,\n      columnNumber: 13\n    }, this)\n  }, void 0, false);\n}\n_s(Voice, \"RCeQpDrFS3uSIb+zcwHwKWmUdQI=\", true);\n_c = Voice;\nexport default Voice;\nvar _c;\n$RefreshReg$(_c, \"Voice\");","map":{"version":3,"names":["React","jsxDEV","_jsxDEV","Fragment","_Fragment","Voice","_s","textToCopy","setTextToCopy","useState","isCopied","setCopied","useClipboard","successDuration","startListening","SpeechRecognition","continuous","language","transcript","browserSupportsSpeechRecognition","useSpeechRecognition","children","className","fileName","_jsxFileName","lineNumber","columnNumber","onClick","stopListening","_c","$RefreshReg$"],"sources":["/Users/ruihanjc/Downloads/codetogive/CodeToGive/frontend/src/Voice.js"],"sourcesContent":["import React from 'react';\nimport './Voice.css'; \n\nfunction Voice() {\n  const [textToCopy, setTextToCopy] = useState();\n    const [isCopied, setCopied] = useClipboard(textToCopy, {\n        successDuration:1000\n    });\n\n    //subscribe to thapa technical for more awesome videos\n\n    const startListening = () => SpeechRecognition.startListening({ continuous: true, language: 'en-IN' });\n    const { transcript, browserSupportsSpeechRecognition } = useSpeechRecognition();\n\n    if (!browserSupportsSpeechRecognition) {\n        return null\n    }\n\n    return (\n        <>\n            <div className=\"container\">\n                <h2>Speech to Text Converter</h2>\n                <br/>\n                <p>A React hook that converts speech from the microphone to text and makes it available to your React\n                    components.</p>\n\n                <div className=\"main-content\" onClick={() =>  setTextToCopy(transcript)}>\n                    {transcript}\n                </div>\n\n                <div className=\"btn-style\">\n\n                    <button onClick={setCopied}>\n                        {isCopied ? 'Copied!' : 'Copy to clipboard'}\n                    </button>\n                    <button onClick={startListening}>Start Listening</button>\n                    <button onClick={SpeechRecognition.stopListening}>Stop Listening</button>\n\n                </div>\n\n            </div>\n\n        </>\n    );\n}\n\nexport default Voice;\n"],"mappings":";;AAAA,OAAOA,KAAK,MAAM,OAAO;AACzB,OAAO,aAAa;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAAA,SAAAC,QAAA,IAAAC,SAAA;AAErB,SAASC,KAAKA,CAAA,EAAG;EAAAC,EAAA;EACf,MAAM,CAACC,UAAU,EAAEC,aAAa,CAAC,GAAGC,QAAQ,CAAC,CAAC;EAC5C,MAAM,CAACC,QAAQ,EAAEC,SAAS,CAAC,GAAGC,YAAY,CAACL,UAAU,EAAE;IACnDM,eAAe,EAAC;EACpB,CAAC,CAAC;;EAEF;;EAEA,MAAMC,cAAc,GAAGA,CAAA,KAAMC,iBAAiB,CAACD,cAAc,CAAC;IAAEE,UAAU,EAAE,IAAI;IAAEC,QAAQ,EAAE;EAAQ,CAAC,CAAC;EACtG,MAAM;IAAEC,UAAU;IAAEC;EAAiC,CAAC,GAAGC,oBAAoB,CAAC,CAAC;EAE/E,IAAI,CAACD,gCAAgC,EAAE;IACnC,OAAO,IAAI;EACf;EAEA,oBACIjB,OAAA,CAAAE,SAAA;IAAAiB,QAAA,eACInB,OAAA;MAAKoB,SAAS,EAAC,WAAW;MAAAD,QAAA,gBACtBnB,OAAA;QAAAmB,QAAA,EAAI;MAAwB;QAAAE,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAI,CAAC,eACjCxB,OAAA;QAAAqB,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAI,CAAC,eACLxB,OAAA;QAAAmB,QAAA,EAAG;MACY;QAAAE,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAG,CAAC,eAEnBxB,OAAA;QAAKoB,SAAS,EAAC,cAAc;QAACK,OAAO,EAAEA,CAAA,KAAOnB,aAAa,CAACU,UAAU,CAAE;QAAAG,QAAA,EACnEH;MAAU;QAAAK,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OACV,CAAC,eAENxB,OAAA;QAAKoB,SAAS,EAAC,WAAW;QAAAD,QAAA,gBAEtBnB,OAAA;UAAQyB,OAAO,EAAEhB,SAAU;UAAAU,QAAA,EACtBX,QAAQ,GAAG,SAAS,GAAG;QAAmB;UAAAa,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OACvC,CAAC,eACTxB,OAAA;UAAQyB,OAAO,EAAEb,cAAe;UAAAO,QAAA,EAAC;QAAe;UAAAE,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OAAQ,CAAC,eACzDxB,OAAA;UAAQyB,OAAO,EAAEZ,iBAAiB,CAACa,aAAc;UAAAP,QAAA,EAAC;QAAc;UAAAE,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OAAQ,CAAC;MAAA;QAAAH,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAExE,CAAC;IAAA;MAAAH,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAEL;EAAC,gBAER,CAAC;AAEX;AAACpB,EAAA,CAzCQD,KAAK;AAAAwB,EAAA,GAALxB,KAAK;AA2Cd,eAAeA,KAAK;AAAC,IAAAwB,EAAA;AAAAC,YAAA,CAAAD,EAAA"},"metadata":{},"sourceType":"module","externalDependencies":[]}