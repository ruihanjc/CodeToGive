{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\ruiha\\\\Downloads\\\\CodeToGive\\\\frontend\\\\src\\\\Voice.js\",\n  _s = $RefreshSig$();\nimport SpeechRecognition, { useSpeechRecognition } from 'react-speech-recognition';\nimport useClipboard from \"react-use-clipboard\";\nimport { useState } from \"react\";\nimport './Voice.css';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nfunction Voice() {\n  _s();\n  const [promptResponse, setPromptResponse] = useState('');\n  const [ourText, setOurText] = useState(\"\");\n  const msg = new SpeechSynthesisUtterance();\n  const speechHandler = msg => {\n    msg.text = ourText;\n    window.speechSynthesis.speak(msg);\n  };\n  const handleSubmit = async () => {\n    const url = 'http://localhost:4444/api/textPrompt';\n    var tmpPromptResponse = '';\n    try {\n      const response = await fetch(url, {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json'\n        },\n        body: JSON.stringify({\n          prompt: transcript\n        })\n      });\n\n      // eslint-disable-next-line no-undef\n      let decoder = new TextDecoderStream();\n      if (!response.body) return;\n      const reader = response.body.pipeThrough(decoder).getReader();\n      while (true) {\n        var {\n          value,\n          done\n        } = await reader.read();\n        if (done) {\n          break;\n        } else {\n          tmpPromptResponse += value;\n          setPromptResponse(tmpPromptResponse);\n        }\n      }\n    } catch (error) {\n      console.log(error);\n    }\n  };\n  const [textToCopy, setTextToCopy] = useState();\n  const [isCopied, setCopied] = useClipboard(textToCopy, {\n    successDuration: 1000\n  });\n\n  //subscribe to thapa technical for more awesome videos\n\n  const startListening = () => SpeechRecognition.startListening({\n    continuous: true,\n    language: 'en-IN'\n  });\n  const {\n    transcript,\n    browserSupportsSpeechRecognition\n  } = useSpeechRecognition();\n  if (!browserSupportsSpeechRecognition) {\n    return null;\n  }\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"voiceBody\",\n    children: /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"container\",\n      children: [/*#__PURE__*/_jsxDEV(\"header\", {\n        className: \"voiceHead\",\n        children: \"Tell your story!\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 75,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"h\", {\n        children: \"Converts speech from the microphone to text and makes it available to your React components.\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 77,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"main-content\",\n        onClick: () => setTextToCopy(transcript),\n        children: transcript\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 79,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"voice-btn-style\",\n        children: [/*#__PURE__*/_jsxDEV(\"button\", {\n          onClick: startListening,\n          children: \"Start Listening\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 84,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n          onClick: handleSubmit,\n          children: \"Submit\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 85,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n          onClick: SpeechRecognition.stopListening,\n          children: \"Stop Listening\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 86,\n          columnNumber: 21\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 83,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"content-answer\",\n        children: [/*#__PURE__*/_jsxDEV(\"h3\", {\n          children: \"Here's your story:\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 92,\n          columnNumber: 17\n        }, this), /*#__PURE__*/_jsxDEV(\"span\", {\n          children: promptResponse\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 93,\n          columnNumber: 17\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 91,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"h1\", {\n        children: \"Hear the story!\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 96,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: () => speechHandler(msg),\n        children: \"SPEAK\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 97,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 74,\n      columnNumber: 13\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 73,\n    columnNumber: 11\n  }, this);\n}\n_s(Voice, \"0sWfW1OUVZNgvpOtkA70uYizYl0=\", false, function () {\n  return [useClipboard, useSpeechRecognition];\n});\n_c = Voice;\nexport default Voice;\nvar _c;\n$RefreshReg$(_c, \"Voice\");","map":{"version":3,"names":["SpeechRecognition","useSpeechRecognition","useClipboard","useState","jsxDEV","_jsxDEV","Voice","_s","promptResponse","setPromptResponse","ourText","setOurText","msg","SpeechSynthesisUtterance","speechHandler","text","window","speechSynthesis","speak","handleSubmit","url","tmpPromptResponse","response","fetch","method","headers","body","JSON","stringify","prompt","transcript","decoder","TextDecoderStream","reader","pipeThrough","getReader","value","done","read","error","console","log","textToCopy","setTextToCopy","isCopied","setCopied","successDuration","startListening","continuous","language","browserSupportsSpeechRecognition","className","children","fileName","_jsxFileName","lineNumber","columnNumber","onClick","stopListening","_c","$RefreshReg$"],"sources":["C:/Users/ruiha/Downloads/CodeToGive/frontend/src/Voice.js"],"sourcesContent":["\r\nimport SpeechRecognition, { useSpeechRecognition } from 'react-speech-recognition';\r\nimport useClipboard from \"react-use-clipboard\";\r\nimport {useState} from \"react\";\r\nimport './Voice.css'; \r\n\r\n\r\nfunction Voice() {\r\n  const [promptResponse, setPromptResponse] = useState('');\r\n  const [ourText, setOurText] = useState(\"\")\r\n  const msg = new SpeechSynthesisUtterance()\r\n    \r\n\r\n    const speechHandler = (msg) => {\r\n      msg.text = ourText\r\n      window.speechSynthesis.speak(msg)\r\n    }\r\n\r\n\r\n  const handleSubmit = async () => {\r\n\r\n    const url = 'http://localhost:4444/api/textPrompt';\r\n    var tmpPromptResponse = '';\r\n    try {\r\n      const response = await fetch(url , {\r\n        method: 'POST',\r\n        headers: {\r\n          'Content-Type': 'application/json'\r\n        },\r\n        body: JSON.stringify({\r\n          prompt: transcript,\r\n        }),\r\n      });\r\n      \r\n      // eslint-disable-next-line no-undef\r\n      let decoder = new TextDecoderStream();\r\n      if (!response.body) return;\r\n      const reader = response.body\r\n        .pipeThrough(decoder)\r\n        .getReader();\r\n      \r\n      while (true) {\r\n        var {value, done} = await reader.read();\r\n        \r\n        if (done) {\r\n          break;\r\n        } else {\r\n          tmpPromptResponse += value;\r\n          setPromptResponse(tmpPromptResponse);\r\n        }\r\n      }\r\n    } catch (error) {\r\n      console.log(error);\r\n    }\r\n\r\n  }\r\n\r\n  const [textToCopy, setTextToCopy] = useState();\r\n    const [isCopied, setCopied] = useClipboard(textToCopy, {\r\n        successDuration:1000\r\n    });\r\n\r\n    //subscribe to thapa technical for more awesome videos\r\n\r\n    const startListening = () => SpeechRecognition.startListening({ continuous: true, language: 'en-IN' });\r\n    const { transcript, browserSupportsSpeechRecognition } = useSpeechRecognition();\r\n\r\n    if (!browserSupportsSpeechRecognition) {\r\n        return null\r\n    }\r\n\r\n    return (\r\n          <div className= \"voiceBody\">\r\n            <div className=\"container\">\r\n                <header className=\"voiceHead\">Tell your story!</header>\r\n\r\n                <h>Converts speech from the microphone to text and makes it available to your React components.</h>\r\n\r\n                <div className=\"main-content\" onClick={() =>  setTextToCopy(transcript)}>\r\n                    {transcript}\r\n                </div>\r\n\r\n                <div className=\"voice-btn-style\">\r\n                    <button onClick={startListening}>Start Listening</button>\r\n                    <button onClick={handleSubmit}>Submit</button>\r\n                    <button onClick={SpeechRecognition.stopListening}>Stop Listening</button>\r\n                </div>\r\n\r\n                \r\n\r\n                <div className=\"content-answer\">\r\n                <h3>Here's your story:</h3>\r\n                <span>{promptResponse}</span>\r\n                </div>\r\n\r\n                <h1>Hear the story!</h1>\r\n                <button onClick={() => speechHandler(msg)}>SPEAK</button>\r\n            </div>\r\n          </div>\r\n          \r\n    );\r\n}\r\n\r\nexport default Voice;\r\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}