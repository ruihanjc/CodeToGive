{"ast":null,"code":"var _jsxFileName = \"/Users/ruihanjc/Downloads/codetogive/CodeToGive/frontend/src/Voice.js\",\n  _s = $RefreshSig$();\nimport SpeechRecognition, { useSpeechRecognition } from 'react-speech-recognition';\nimport useClipboard from \"react-use-clipboard\";\nimport { useState } from \"react\";\nimport './Voice.css';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nfunction Voice() {\n  _s();\n  const [textToCopy, setTextToCopy] = useState();\n  const [isCopied, setCopied] = useClipboard(textToCopy, {\n    successDuration: 1000\n  });\n  const handleSubmit = async () => {\n    var characters = document.getElementById(\"textarea1\").value;\n    var style = document.getElementById(\"textarea2\").value;\n    var time = document.getElementById(\"textarea3\").value;\n    const url = 'http://localhost:4444/api/textPrompt';\n    var tmpPromptResponse = '';\n    try {\n      const response = await fetch(url, {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json'\n        },\n        body: JSON.stringify({\n          prompt: `Create a story of 300 words, with main characters called: ${characters} and a style of ${style} as well as the time of ${time}`\n        })\n      });\n\n      // eslint-disable-next-line no-undef\n      let decoder = new TextDecoderStream();\n      if (!response.body) return;\n      const reader = response.body.pipeThrough(decoder).getReader();\n      while (true) {\n        var {\n          value,\n          done\n        } = await reader.read();\n        if (done) {\n          break;\n        } else {\n          tmpPromptResponse += value;\n          setPromptResponse(tmpPromptResponse);\n        }\n      }\n    } catch (error) {\n      console.log(error);\n    }\n  };\n\n  //subscribe to thapa technical for more awesome videos\n\n  const startListening = () => SpeechRecognition.startListening({\n    continuous: true,\n    language: 'en-IN'\n  });\n  const {\n    transcript,\n    browserSupportsSpeechRecognition\n  } = useSpeechRecognition();\n  if (!browserSupportsSpeechRecognition) {\n    return null;\n  }\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"container\",\n      children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n        children: \"Speek to have your story!\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 69,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 70,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n        children: \"Converts speech from the microphone to text and makes it available to your React components.\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 71,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"main-content\",\n        onClick: () => setTextToCopy(transcript),\n        children: transcript\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 73,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"btn-style\",\n        children: [/*#__PURE__*/_jsxDEV(\"button\", {\n          onClick: startListening,\n          children: \"Start Listening\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 78,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n          onClick: SpeechRecognition.stopListening,\n          children: \"Stop Listening\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 79,\n          columnNumber: 21\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 77,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: startListening,\n        children: \"Submit\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 82,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 68,\n      columnNumber: 13\n    }, this)\n  }, void 0, false);\n}\n_s(Voice, \"RCeQpDrFS3uSIb+zcwHwKWmUdQI=\", false, function () {\n  return [useClipboard, useSpeechRecognition];\n});\n_c = Voice;\nexport default Voice;\nvar _c;\n$RefreshReg$(_c, \"Voice\");","map":{"version":3,"names":["SpeechRecognition","useSpeechRecognition","useClipboard","useState","jsxDEV","_jsxDEV","Fragment","_Fragment","Voice","_s","textToCopy","setTextToCopy","isCopied","setCopied","successDuration","handleSubmit","characters","document","getElementById","value","style","time","url","tmpPromptResponse","response","fetch","method","headers","body","JSON","stringify","prompt","decoder","TextDecoderStream","reader","pipeThrough","getReader","done","read","setPromptResponse","error","console","log","startListening","continuous","language","transcript","browserSupportsSpeechRecognition","children","className","fileName","_jsxFileName","lineNumber","columnNumber","onClick","stopListening","_c","$RefreshReg$"],"sources":["/Users/ruihanjc/Downloads/codetogive/CodeToGive/frontend/src/Voice.js"],"sourcesContent":["\nimport SpeechRecognition, { useSpeechRecognition } from 'react-speech-recognition';\nimport useClipboard from \"react-use-clipboard\";\nimport {useState} from \"react\";\nimport './Voice.css'; \n\n\n\nfunction Voice() {\n  const [textToCopy, setTextToCopy] = useState();\n    const [isCopied, setCopied] = useClipboard(textToCopy, {\n        successDuration:1000\n    });\n\n    const handleSubmit = async () => {\n\n    var characters = document.getElementById(\"textarea1\").value;\n    var style = document.getElementById(\"textarea2\").value;\n    var time = document.getElementById(\"textarea3\").value;\n\n    const url = 'http://localhost:4444/api/textPrompt';\n    var tmpPromptResponse = '';\n    try {\n      const response = await fetch(url , {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json'\n        },\n        body: JSON.stringify({\n          prompt: `Create a story of 300 words, with main characters called: ${characters} and a style of ${style} as well as the time of ${time}`,\n        }),\n      });\n      \n      // eslint-disable-next-line no-undef\n      let decoder = new TextDecoderStream();\n      if (!response.body) return;\n      const reader = response.body\n        .pipeThrough(decoder)\n        .getReader();\n      \n      while (true) {\n        var {value, done} = await reader.read();\n        \n        if (done) {\n          break;\n        } else {\n          tmpPromptResponse += value;\n          setPromptResponse(tmpPromptResponse);\n        }\n      }\n    } catch (error) {\n      console.log(error);\n    }\n\n  }\n\n    //subscribe to thapa technical for more awesome videos\n\n    const startListening = () => SpeechRecognition.startListening({ continuous: true, language: 'en-IN' });\n    const { transcript, browserSupportsSpeechRecognition } = useSpeechRecognition();\n\n    if (!browserSupportsSpeechRecognition) {\n        return null\n    }\n\n    return (\n        <>\n            <div className=\"container\">\n                <h2>Speek to have your story!</h2>\n                <br/>\n                <p>Converts speech from the microphone to text and makes it available to your React components.</p>\n\n                <div className=\"main-content\" onClick={() =>  setTextToCopy(transcript)}>\n                    {transcript}\n                </div>\n\n                <div className=\"btn-style\">\n                    <button onClick={startListening}>Start Listening</button>\n                    <button onClick={SpeechRecognition.stopListening}>Stop Listening</button>\n                </div>\n\n                <button onClick={startListening}>Submit</button>\n\n            </div>\n\n        </>\n    );\n}\n\nexport default Voice;\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}