{"ast":null,"code":"var _jsxFileName = \"/Users/ruihanjc/Downloads/codetogive/CodeToGive/frontend/src/Voice.js\",\n  _s = $RefreshSig$();\nimport SpeechRecognition, { useSpeechRecognition } from 'react-speech-recognition';\nimport useClipboard from \"react-use-clipboard\";\nimport { useState } from \"react\";\nimport './Voice.css';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nfunction Voice() {\n  _s();\n  const [promptResponse, setPromptResponse] = useState('');\n  const handleSubmit = async () => {\n    var promptText = document.getElementById(\"textarea1\").value;\n    const url = 'http://localhost:4444/api/textPrompt';\n    var tmpPromptResponse = '';\n    try {\n      const response = await fetch(url, {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json'\n        },\n        body: JSON.stringify({\n          prompt: promptText\n        })\n      });\n\n      // eslint-disable-next-line no-undef\n      let decoder = new TextDecoderStream();\n      if (!response.body) return;\n      const reader = response.body.pipeThrough(decoder).getReader();\n      while (true) {\n        var {\n          value,\n          done\n        } = await reader.read();\n        if (done) {\n          break;\n        } else {\n          tmpPromptResponse += value;\n          setPromptResponse(tmpPromptResponse);\n        }\n      }\n    } catch (error) {\n      console.log(error);\n    }\n  };\n  const [textToCopy, setTextToCopy] = useState();\n  const [isCopied, setCopied] = useClipboard(textToCopy, {\n    successDuration: 1000\n  });\n\n  //subscribe to thapa technical for more awesome videos\n\n  const startListening = () => SpeechRecognition.startListening({\n    continuous: true,\n    language: 'en-IN'\n  });\n  const {\n    transcript,\n    browserSupportsSpeechRecognition\n  } = useSpeechRecognition();\n  if (!browserSupportsSpeechRecognition) {\n    return null;\n  }\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"container\",\n      children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n        children: \"Speek to have your story!\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 68,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 69,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n        children: \"Converts speech from the microphone to text and makes it available to your React components.\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 70,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        id: \"textarea1\",\n        className: \"main-content\",\n        onClick: () => setTextToCopy(transcript),\n        children: transcript\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 72,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"btn-style\",\n        children: [/*#__PURE__*/_jsxDEV(\"button\", {\n          onClick: startListening,\n          children: \"Start Listening\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 77,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n          onClick: SpeechRecognition.stopListening,\n          children: \"Stop Listening\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 78,\n          columnNumber: 21\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 76,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        style: {\n          order: 3\n        },\n        children: /*#__PURE__*/_jsxDEV(\"button\", {\n          onClick: handleSubmit,\n          children: \"Submit\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 82,\n          columnNumber: 17\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 81,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        style: {\n          order: 4,\n          marginTop: '1rem'\n        },\n        children: [/*#__PURE__*/_jsxDEV(\"h3\", {\n          children: \"Streamed Prompt Response:\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 88,\n          columnNumber: 17\n        }, this), /*#__PURE__*/_jsxDEV(\"span\", {\n          children: promptResponse\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 89,\n          columnNumber: 17\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 87,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 67,\n      columnNumber: 13\n    }, this)\n  }, void 0, false);\n}\n_s(Voice, \"8ubFJIyzk2gb1sn+ps58Dc8qP3o=\", false, function () {\n  return [useClipboard, useSpeechRecognition];\n});\n_c = Voice;\nexport default Voice;\nvar _c;\n$RefreshReg$(_c, \"Voice\");","map":{"version":3,"names":["SpeechRecognition","useSpeechRecognition","useClipboard","useState","jsxDEV","_jsxDEV","Fragment","_Fragment","Voice","_s","promptResponse","setPromptResponse","handleSubmit","promptText","document","getElementById","value","url","tmpPromptResponse","response","fetch","method","headers","body","JSON","stringify","prompt","decoder","TextDecoderStream","reader","pipeThrough","getReader","done","read","error","console","log","textToCopy","setTextToCopy","isCopied","setCopied","successDuration","startListening","continuous","language","transcript","browserSupportsSpeechRecognition","children","className","fileName","_jsxFileName","lineNumber","columnNumber","id","onClick","stopListening","style","order","marginTop","_c","$RefreshReg$"],"sources":["/Users/ruihanjc/Downloads/codetogive/CodeToGive/frontend/src/Voice.js"],"sourcesContent":["\nimport SpeechRecognition, { useSpeechRecognition } from 'react-speech-recognition';\nimport useClipboard from \"react-use-clipboard\";\nimport {useState} from \"react\";\nimport './Voice.css'; \n\n\nfunction Voice() {\n  const [promptResponse, setPromptResponse] = useState('');\n\n  const handleSubmit = async () => {\n\n    var promptText = document.getElementById(\"textarea1\").value;\n\n    const url = 'http://localhost:4444/api/textPrompt';\n    var tmpPromptResponse = '';\n    try {\n      const response = await fetch(url , {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json'\n        },\n        body: JSON.stringify({\n          prompt: promptText,\n        }),\n      });\n      \n      // eslint-disable-next-line no-undef\n      let decoder = new TextDecoderStream();\n      if (!response.body) return;\n      const reader = response.body\n        .pipeThrough(decoder)\n        .getReader();\n      \n      while (true) {\n        var {value, done} = await reader.read();\n        \n        if (done) {\n          break;\n        } else {\n          tmpPromptResponse += value;\n          setPromptResponse(tmpPromptResponse);\n        }\n      }\n    } catch (error) {\n      console.log(error);\n    }\n\n  }\n\n  const [textToCopy, setTextToCopy] = useState();\n    const [isCopied, setCopied] = useClipboard(textToCopy, {\n        successDuration:1000\n    });\n\n    //subscribe to thapa technical for more awesome videos\n\n    const startListening = () => SpeechRecognition.startListening({ continuous: true, language: 'en-IN' });\n    const { transcript, browserSupportsSpeechRecognition } = useSpeechRecognition();\n\n    if (!browserSupportsSpeechRecognition) {\n        return null\n    }\n\n    return (\n        <>\n            <div className=\"container\">\n                <h2>Speek to have your story!</h2>\n                <br/>\n                <p>Converts speech from the microphone to text and makes it available to your React components.</p>\n\n                <div id=\"textarea1\" className=\"main-content\" onClick={() =>  setTextToCopy(transcript)}>\n                    {transcript}\n                </div>\n\n                <div className=\"btn-style\">\n                    <button onClick={startListening}>Start Listening</button>\n                    <button onClick={SpeechRecognition.stopListening}>Stop Listening</button>\n                </div>\n\n                <div style={{order: 3}}>\n                <button\n                  onClick={handleSubmit}\n                >Submit</button>\n                </div>\n\n                <div style={{order: 4, marginTop: '1rem'}}>\n                <h3>Streamed Prompt Response:</h3>\n                <span>{promptResponse}</span>\n                </div>\n\n            </div>\n\n        </>\n    );\n}\n\nexport default Voice;\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}