{"ast":null,"code":"import { useState as t, useEffect as o } from \"react\";\nimport r from \"copy-to-clipboard\";\nexport default function (n, i) {\n  var u = t(!1),\n    c = u[0],\n    e = u[1],\n    f = i && i.successDuration;\n  return o(function () {\n    if (c && f) {\n      var t = setTimeout(function () {\n        e(!1);\n      }, f);\n      return function () {\n        clearTimeout(t);\n      };\n    }\n  }, [c, f]), [c, function () {\n    var t = r(n);\n    e(t);\n  }];\n}","map":{"version":3,"names":["n","i","u","t","c","e","f","successDuration","o","setTimeout","clearTimeout","r"],"sources":["/Users/ruihanjc/Downloads/codetogive/CodeToGive/frontend/node_modules/react-use-clipboard/src/index.tsx"],"sourcesContent":["import { useState, useEffect } from \"react\";\nimport copy from \"copy-to-clipboard\";\n\ninterface IOptions {\n  /**\n   * Reset the status after a certain number of milliseconds. This is useful\n   * for showing a temporary success message.\n   */\n  successDuration?: number;\n}\n\nexport default function useClipboard(\n  text: string,\n  options?: IOptions\n): [boolean, () => void] {\n  const [isCopied, setIsCopied] = useState(false);\n  const successDuration = options && options.successDuration;\n\n  useEffect(() => {\n    if (isCopied && successDuration) {\n      const id = setTimeout(() => {\n        setIsCopied(false);\n      }, successDuration);\n\n      return () => {\n        clearTimeout(id);\n      };\n    }\n  }, [isCopied, successDuration]);\n\n  return [\n    isCopied,\n    () => {\n      const didCopy = copy(text);\n      setIsCopied(didCopy);\n    },\n  ];\n}\n"],"mappings":";;yBAYEA,CAAA,EACAC,CAAA;EAAA,IAAAC,CAAA,GAEgCC,CAAA,EAAS;IAAlCC,CAAA,GAAAF,CAAA;IAAUG,CAAA,GAAAH,CAAA;IACXI,CAAA,GAAkBL,CAAA,IAAWA,CAAA,CAAQM,eAAA;EAc3C,OAZAC,CAAA,CAAU;IACR,IAAIJ,CAAA,IAAYE,CAAA,EAAiB;MAC/B,IAAMH,CAAA,GAAKM,UAAA,CAAW;QACpBJ,CAAA,EAAY;MAAA,GACXC,CAAA;MAEH;QACEI,YAAA,CAAaP,CAAA;MAAA;IAAA;EAAA,GAGhB,CAACC,CAAA,EAAUE,CAAA,IAEP,CACLF,CAAA,EACA;IACE,IAAMD,CAAA,GAAUQ,CAAA,CAAKX,CAAA;IACrBK,CAAA,CAAYF,CAAA;EAAA;AAAA"},"metadata":{},"sourceType":"module","externalDependencies":[]}